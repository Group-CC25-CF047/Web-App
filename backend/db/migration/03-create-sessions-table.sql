-- 03-create-sessions-table.sql

/*
 * Sessions Table and Associated Objects
 *
 * This script creates the `sessions` table, along with associated indexes and triggers.
 * This table is used to store refresh sessions for user authentication.
 */

/*
 * Table: sessions
 *
 * Description:
 *   Stores refresh sessions used for user authentication. Includes an
 *   `expires_at` column for session expiration.
 *
 * SQL Explanation:
 *   - Creates a table with UUID PRIMARY KEY generated by gen_random_uuid()
 *   - Establishes foreign key relationship to users table
 *   - Sets default values for timestamps
 *   - Implements referential integrity with ON DELETE CASCADE
 *
 * Columns:
 *   - id (UUID PRIMARY KEY DEFAULT gen_random_uuid()): Unique identifier for
 *     each session.
 *   - user_id (UUID NOT NULL): Foreign key referencing the `users` table.
 *     Links the session to the user it belongs to.
 *   - token (TEXT NOT NULL): The refresh session string. Must be unique.
 *   - user_agent (TEXT): Information about the client's browser, operating system
 *     and device that created the session. Useful for security auditing and
 *     analytics purposes.
 *   - expires_at (TIMESTAMP WITH TIME ZONE NOT NULL): Timestamp indicating
 *     when the session expires.
 *   - created_at (TIMESTAMP WITH TIME ZONE DEFAULT NOW()): Timestamp of when
 *     the session record was created.
 *   - updated_at (TIMESTAMP WITH TIME ZONE): Timestamp of the last update to
 *     the session record. Automatically updated by the
 *     `update_sessions_updated_at` trigger.
 *   - FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE: Ensures
 *     referential integrity. If a user is deleted, their associated sessions
 *     are also deleted.
 */
CREATE TABLE IF NOT EXISTS sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    token TEXT NOT NULL,
    user_agent TEXT,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

/*
 * Indexes on the sessions table
 *
 * Description:
 *   These indexes improve query performance on frequently accessed columns.
 *   Uses B-tree indexes for all columns as it's the most compatible option
 *
 * SQL Explanation:
 *   - B-tree indexes support range queries, sorting, and equality comparisons
 *   - Each CREATE INDEX statement builds a separate database structure that speeds up lookups
 *   - Indexes require additional storage but significantly improve query speed
 *
 * Indexes:
 *   - idx_sessions_token (UNIQUE): Ensures each session token is unique.
 *   - idx_sessions_user: Allows fast lookup of sessions by user.
 *   - idx_sessions_created_at: Useful for auditing and cleanup tasks.
 *   - idx_sessions_expires_at: Optimizes queries for expired sessions.
 */
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_sessions_token') THEN
        CREATE UNIQUE INDEX idx_sessions_token ON sessions (token);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_sessions_user') THEN
        CREATE INDEX idx_sessions_user ON sessions (user_id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_sessions_created_at') THEN
        CREATE INDEX idx_sessions_created_at ON sessions (created_at);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_sessions_expires_at') THEN
        CREATE INDEX idx_sessions_expires_at ON sessions (expires_at);
    END IF;
END $$;

/*
 * Trigger: update_sessions_updated_at_update
 *
 * Description:
 *   Automatically updates the `updated_at` column to the current timestamp
 *   whenever a row in the `sessions` table is updated.
 *
 * SQL Explanation:
 *   - BEFORE UPDATE trigger executes prior to the actual update operation
 *   - FOR EACH ROW means it runs once for every row affected by the UPDATE
 *   - Calls update_column_updated_at() function to set the current timestamp
 */
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_sessions_updated_at_update') THEN
        CREATE TRIGGER update_sessions_updated_at_update
        BEFORE UPDATE ON sessions
        FOR EACH ROW
        EXECUTE FUNCTION update_column_updated_at();
    END IF;
END $$;

/*
 * Trigger: update_sessions_updated_at_insert
 *
 * Description:
 *   Automatically updates the `updated_at` column to the current timestamp
 *   whenever a row is inserted into the `sessions` table.
 *
 * SQL Explanation:
 *   - BEFORE INSERT trigger executes prior to the actual insert operation
 *   - FOR EACH ROW means it runs once for every row affected by the INSERT
 *   - Calls update_column_updated_at() function to set the current timestamp
 */
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_sessions_updated_at_insert') THEN
        CREATE TRIGGER update_sessions_updated_at_insert
        BEFORE INSERT ON sessions
        FOR EACH ROW
        EXECUTE FUNCTION update_column_updated_at();
    END IF;
END $$;

/*
 * Example Scheduled Job (using pg_cron)
 *
 * Description:
 *   These are *examples* of how to schedule a job to periodically clean up
 *   expired sessions.
 *
 * SQL Explanation:
 *   - Uses pg_cron extension to schedule database maintenance tasks
 *   - Schedule parameter follows cron syntax (minute, hour, day, month, weekday)
 *   - Executes SQL statements to clean expired records at specified intervals
 *   - Commented out as these are examples that need to be configured per deployment
 *   - Uses CREATE OR REPLACE to avoid duplication when re-running scripts
 */

-- Example: Delete expired sessions
-- SELECT cron.unschedule('cleanup-expired-sessions');
-- SELECT cron.schedule('cleanup-expired-sessions', '0 3 * * *', $$
--     DELETE FROM sessions WHERE expires_at < NOW();
-- $$);

-- Example: Soft-revoke expired sessions (recommended)
-- SELECT cron.unschedule('revoke-expired-sessions');
-- SELECT cron.schedule('revoke-expired-sessions', '0 3 * * *', $$
--    UPDATE sessions SET revoked = TRUE WHERE expires_at < NOW() AND revoked = FALSE;
-- $$);
